from . import db
from flask_login import UserMixin
from sqlalchemy.sql import func

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(150), unique=True)
    password = db.Column(db.String(150))
    first_name = db.Column(db.String(150))
    rid = db.Column(db.String(150))
    p_type = db.Column(db.String(50))


class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    part_no = db.Column(db.String(100), nullable=False)
    category = db.Column(db.String(100), nullable=False)
    make = db.Column(db.String(100), nullable=False)
    qty = db.Column(db.Integer, nullable=False)
    approved_not_approved = db.Column(db.String(100), nullable=False)
    billable_non_billable = db.Column(db.String(100), nullable=False)
    ordered_qty = db.Column(db.Integer, nullable=False)
    order_status = db.Column(db.String(100), nullable=False)
    podate = db.Column(db.String(100), nullable=False)
    delivery_period = db.Column(db.String(100), nullable=False)
    delivery_at = db.Column(db.String(100), nullable=False)
    supplied_qty = db.Column(db.Integer, nullable=False)
    delivery_status = db.Column(db.String(100), nullable=False)
    backlog_qty = db.Column(db.Integer, nullable=False)
    remarks = db.Column(db.String(100), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', backref=db.backref('products', lazy=True))

class Info(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    loc = db.Column(db.String(100), nullable=False)
    po = db.Column(db.Integer, nullable=False)
    pon = db.Column(db.String(100), nullable=False)
    rev = db.Column(db.Integer, nullable=False)
    iof = db.Column(db.Integer, nullable=False)
    iofdate = db.Column(db.String(100), nullable=False)
    revdate = db.Column(db.String(100), nullable=False)
    iof1 = db.Column(db.Integer, nullable=False)
    iof2 = db.Column(db.String(100), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', backref=db.backref('infos', lazy=True))



class UserSession(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    key = db.Column(db.String(50), nullable=False)
    value = db.Column(db.Text, nullable=True)
    user = db.relationship('User', backref=db.backref('sessions', lazy=True))

class ManDay(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    uniquee = db.Column(db.String(100), nullable=False)
    day = db.Column(db.Integer, nullable=False)
    date = db.Column(db.String(10), nullable=False)
    site = db.Column(db.String(100), nullable=False)
    sub = db.Column(db.String(100), nullable=False)
    remarks = db.Column(db.String(200), nullable=True)
    support = db.Column(db.String(200), nullable=True)
    support1 = db.Column(db.String(200), nullable=True)
    sdate = db.Column(db.String(10), nullable=False)
    cable = db.Column(db.Integer, nullable=False, default = 0)
    pvc = db.Column(db.Integer, nullable=False, default = 0)
    markingdrilling = db.Column(db.Integer, nullable=False, default = 0)
    ci = db.Column(db.Integer, nullable=False, default = 0)
    cable1 = db.Column(db.Integer, nullable=False, default = 0)
    pvc1 = db.Column(db.Integer, nullable=False, default = 0)
    markingdrilling1 = db.Column(db.Integer, nullable=False, default = 0)
    ci1 = db.Column(db.Integer, nullable=False, default = 0)
    cable2 = db.Column(db.Integer, nullable=False, default = 0)
    pvc2 = db.Column(db.Integer, nullable=False, default = 0)
    markingdrilling2 = db.Column(db.Integer, nullable=False, default = 0)
    ci2 = db.Column(db.Integer, nullable=False, default = 0)
    backboxinstallation = db.Column(db.Integer, nullable=False, default = 0)
    baseinstallation = db.Column(db.Integer, nullable=False, default = 0)
    detectorinstallation = db.Column(db.Integer, nullable=False, default = 0)
    controlmoduleinstallation = db.Column(db.Integer, nullable=False, default = 0)
    hooterinstallation = db.Column(db.Integer, nullable=False, default = 0)
    mcpinstallation = db.Column(db.Integer, nullable=False, default = 0)
    responseindicatorinstallation = db.Column(db.Integer, nullable=False, default = 0)
    monitormoduleinstallation = db.Column(db.Integer, nullable=False, default = 0)
    controlrelaymoduleinstallation = db.Column(db.Integer, nullable=False, default = 0)
    isolatormoduleinstallation = db.Column(db.Integer, nullable=False, default = 0)
    paspeakerinstallation = db.Column(db.Integer, nullable=False, default = 0)
    twtbbackboxinstallation = db.Column(db.Integer, nullable=False, default = 0)
    twtbspeakerinstallation = db.Column(db.Integer, nullable=False, default = 0)
    firepanelinstallation = db.Column(db.Integer, nullable=False, default = 0)
    pacontrollerinstallation = db.Column(db.Integer, nullable=False, default = 0)
    twtbcontrollerinstallation = db.Column(db.Integer, nullable=False, default = 0)
    smpsinstallation = db.Column(db.Integer, nullable=False, default = 0)
    detectortesting = db.Column(db.Integer, nullable=False, default = 0)
    continuitytesting = db.Column(db.Integer, nullable=False, default = 0)
    programming = db.Column(db.Integer, nullable=False, default = 0)
    continuitytesting1 = db.Column(db.Integer, nullable=False, default = 0)
    programming1 = db.Column(db.Integer, nullable=False, default = 0)
    continuitytesting2 = db.Column(db.Integer, nullable=False, default = 0)
    programming2 = db.Column(db.Integer, nullable=False, default = 0)
    chippingplasting = db.Column(db.Integer, nullable=False, default = 0)
    handingoverdocument = db.Column(db.Integer, nullable=False, default = 0)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', backref=db.backref('mandays', lazy=True))



class Planned(db.Model):
    id = db.Column(db.Integer, primary_key=True )
    cable_planned = db.Column(db.Integer, nullable=False, default = 1)
    pvc_planned = db.Column(db.Integer, nullable=False, default = 1)
    mark_planned = db.Column(db.Integer, nullable=False, default = 1)
    ci_planned = db.Column(db.Integer, nullable=False, default = 1)
    cable_planned1 = db.Column(db.Integer, nullable=False, default = 1)
    pvc_planned1 = db.Column(db.Integer, nullable=False, default = 1)
    mark_planned1 = db.Column(db.Integer, nullable=False, default = 1)
    ci_planned1 = db.Column(db.Integer, nullable=False, default = 1)
    cable_planned2 = db.Column(db.Integer, nullable=False, default = 1)
    pvc_planned2 = db.Column(db.Integer, nullable=False, default = 1)
    mark_planned2 = db.Column(db.Integer, nullable=False, default = 1)
    ci_planned2 = db.Column(db.Integer, nullable=False, default = 1)
    backboxinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    baseinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    detectorinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    controlmoduleinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    hooterinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    mcpinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    responseindicatorinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    monitormoduleinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    controlrelaymoduleinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    isolatormoduleinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    paspeakerinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    twtbbackboxinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    twtbspeakerinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    firepanelinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    pacontrollerinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    twtbcontrollerinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    smpsinstallation_planned = db.Column(db.Integer, nullable=False, default = 1)
    detectortesting_planned = db.Column(db.Integer, nullable=False, default = 1)
    continuitytesting_planned = db.Column(db.Integer, nullable=False, default = 1)
    programming_planned = db.Column(db.Integer, nullable=False, default = 1)
    continuitytesting_planned1 = db.Column(db.Integer, nullable=False, default = 1)
    programming_planned1 = db.Column(db.Integer, nullable=False, default = 1)
    continuitytesting_planned2 = db.Column(db.Integer, nullable=False, default = 1)
    programming_planned2 = db.Column(db.Integer, nullable=False, default = 1)
    chippingplasting_planned = db.Column(db.Integer, nullable=False, default = 1)
    handingoverdocument_planned = db.Column(db.Integer, nullable=False, default = 1)
    start = db.Column(db.String(10), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', backref=db.backref('planned', lazy=True))

class Contact(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name1 = db.Column(db.String(200), nullable=True)
    name2 = db.Column(db.String(200), nullable=True)
    email1 = db.Column(db.String(200), nullable=True)
    email2 = db.Column(db.String(200), nullable=True)
    contact1 =  db.Column(db.Integer, nullable=False)
    contact2 =  db.Column(db.Integer, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', backref=db.backref('contact', lazy=True))

class Stock(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    menu = db.Column(db.String(50), nullable=False)
    item = db.Column(db.String(100), nullable=False)
    make = db.Column(db.String(100), nullable=False)
    unit = db.Column(db.Integer, nullable=False)
    iof = db.Column(db.Integer, nullable=False)
    stock = db.Column(db.Integer, nullable=False)
    cumulative = db.Column(db.Integer, nullable=False)
    date1 = db.Column(db.String(50), nullable=False)
    remarks1 = db.Column(db.String(255))
    date2 = db.Column(db.String(50), nullable=False)
    remarks2 = db.Column(db.String(255))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', backref=db.backref('stocks', lazy=True))
